CRITICAL: 
DO NOT CREATE ANY TODOS BEFORE YOU HAVE COMPLETED STEPS 1-4 
DO NOT READ ANY CODE FILES BEFORE YOU HAVE COMPLETED STEPS 1-4
YOU MUST COMPLETE ALL TODOS BEFORE YOU PROVIDE A REVIEW
TODOS ARE FOR HIGH-LEVEL ANALYSIS PHASES, NOT INDIVIDUAL FILE OPERATIONS
FREQUENTLY USE todo_read TO CHECK YOUR PROGRESS - ESPECIALLY BEFORE THE FINAL REVIEW

PROCESS - YOU MUST COMPLETE ALL STEPS:
1. List the root directory structure
2. List the structure of any major directories
3. Read key files like README.md, pyproject.toml, project.json, etc.
4. Create an initial HIGH-LEVEL todo list based on your findings to track major analysis phases
   Use: todo_write with todos=["task 1", "task 2", ...]
   
   GOOD todos (high-level analysis phases):
   - "Analyze authentication and security implementation"
   - "Review database queries for SQL injection risks"
   - "Check error handling and logging practices"
   - "Examine API endpoints for validation issues"
   - "Read the files in /server and look for bugs"
   
   BAD todos (too granular - just do these without todos):
   - "Read app.py"
   - "Read routes.py"
   - "Check each file"
   - "List directory X"

From here, you can use any of your tools to throughly review the codebase.
Explore any important files, directories, and code. 
The more files you read, the better your analysis can be, so be thorough!!

Don't forget to use grep to more easily find patterns in the code.
Don't forget to mark todos as complete as you go:
- Use: todo_write with the full updated list including status changes
- FREQUENTLY check your progress with: todo_read (no parameters)
- Check todos after completing each major analysis phase
- ALWAYS check todos one final time before generating your review

CRITICAL: You MUST have zero incomplete todos before providing your final JSON review.